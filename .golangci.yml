# Golangci-lint configuration for Portunix
# Modern Go linting with comprehensive rules

run:
  timeout: 5m
  issues-exit-code: 1
  tests: true

output:
  formats:
    - format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  sort-results: true

linters-settings:
  # Cyclomatic complexity
  cyclop:
    max-complexity: 15
    package-average: 10.0

  # Cognitive complexity
  gocognit:
    min-complexity: 20

  # Function length
  funlen:
    lines: 80
    statements: 50

  # Line length
  lll:
    line-length: 120


  # Formatting
  gofmt:
    simplify: true
  goimports:
    local-prefixes: portunix.cz

  # Error handling
  errcheck:
    check-type-assertions: true
    check-blank: true
    exclude-functions:
      - (*os.File).Close
      - (*sql.DB).Close
      - (*sql.Rows).Close

  # Inefficient assignments
  ineffassign:
    check-exported: false

  # Unused parameters
  unparam:
    check-exported: false

  # Misspelling
  misspell:
    locale: US

  # Naming conventions
  revive:
    confidence: 0.8

  # Performance
  prealloc:
    simple: true
    range-loops: true
    for-loops: false

  # Security
  gosec:
    severity: medium
    confidence: medium
    excludes:
      - G104 # Unhandled errors (covered by errcheck)
      - G204 # Subprocess with variable (needed for Docker commands)

  # Code duplication
  dupl:
    threshold: 100

  # Package comments
  godot:
    scope: declarations
    capital: true

  # Test helpers
  testpackage:
    skip-regexp: .*_test\.go

  # Go mod
  gomoddirectives:
    replace-local: true
    replace-allow-list:
      - portunix.cz/app
      - portunix.cz/parser
      - portunix.cz/cmd
      - portunix.cz/app/sandbox
      - portunix.cz/app/install
      - github.com/cassandragargoyle/portunix/app/wizard

linters:
  enable:
    # Enabled by default
    - errcheck        # Check for unhandled errors
    - gosimple        # Simplify code
    - govet           # Go vet
    - ineffassign     # Inefficient assignments
    - staticcheck     # Static analysis
    - typecheck       # Type checking
    - unused          # Unused code
    
    # Additional linters
    - bodyclose       # HTTP response body close
    - cyclop          # Cyclomatic complexity
    - dupl            # Code duplication
    - copyloopvar     # Loop variable capture (replaces exportloopref)
    - funlen          # Function length
    - gocognit        # Cognitive complexity
    - goconst         # Repeated strings as constants
    - gocritic        # Comprehensive checks
    - gofmt           # Formatting
    - goimports       # Import formatting
    - revive          # Linting (replaces golint)
    - gosec           # Security checks
    - lll             # Line length
    - misspell        # Misspelling
    - nakedret        # Naked returns
    - prealloc        # Slice preallocation
    - rowserrcheck    # SQL rows error check
    - sqlclosecheck   # SQL close check
    - unconvert       # Unnecessary conversions
    - unparam         # Unused parameters
    - whitespace      # Whitespace issues
    
    # Test specific
    - testpackage     # Test package naming
    
    # Documentation
    - godot           # Comments end with period
    
    # Go modules
    - gomoddirectives # Go mod directives

  disable:
    - deadcode        # Deprecated (replaced by unused)
    - varcheck        # Deprecated (replaced by unused)
    - structcheck     # Deprecated (replaced by unused)
    - interfacer      # Deprecated
    - maligned        # Deprecated
    - scopelint       # Deprecated (replaced by copyloopvar)
    - golint          # Deprecated (replaced by revive)
    - exportloopref   # Deprecated (replaced by copyloopvar)

  # Maximum issues count per one linter
  max-issues-per-linter: 50
  
  # Maximum count of issues with the same text
  max-same-issues: 10

  # Show only new issues
  new: false

  # Fix found issues (if it's supported by the linter)
  fix: false
  
  # Use uniq-by-line instead of deprecated run.uniq-by-line
  uniq-by-line: true
  
  # Directories to exclude
  exclude-dirs:
    - vendor
    - .git
    - bin
    - test/fixtures
    - .portunix-github-sync
    - test/tmp
  exclude-files:
    - ".*\\.pb\\.go$"
    - ".*_generated\\.go$"
    - "test/test-plugin/main.go"
    - "test/integration/tmp/.*"

  exclude-rules:
    # Exclude embed configuration errors in CI environment
    - text: "build system did not supply embed configuration"
      linters:
        - typecheck
    
    # Exclude invalid go:embed in CI environment  
    - text: "invalid go:embed:"
      linters:
        - typecheck
        - govet
        
    # Allow embed usage in main.go
    - path: main\.go
      text: "build system did not supply embed configuration"
      linters:
        - typecheck
    
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gocognit
        - errcheck
        - dupl
        - gosec
        - funlen
        - lll
        - goconst
        
    # Exclude cognitive complexity from integration tests
    - path: test/integration/
      linters:
        - gocognit

    # Exclude formatting issues in test/tmp directories
    - path: test/tmp/
      linters:
        - gofmt
        
    # Exclude formatting issues in generated test plugins
    - path: test-plugin/
      linters:
        - gofmt
        - godot
        
    # Exclude issues in generated/temporary test files
    - path: test-created-plugin-
      linters:
        - gofmt
        - godot

    # Exclude some staticcheck messages
    - linters:
        - staticcheck
      text: "SA9003:"

    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

    # Exclude certain revive issues
    - linters:
        - revive
      text: "should be"

    # Exclude some gosec messages
    - linters:
        - gosec
      text: "G204:"  # Allow subprocess with variables for Docker commands
      
    # Exclude ineffassign for test files
    - path: _test\.go
      linters:
        - ineffassign

  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  exclude-use-default: false

  # List of regexps of issue texts to exclude, empty list by default.
  exclude:
    # errcheck: Almost all programs ignore errors on these functions
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked
    
    # revive: False positives
    - should have a package comment
    - comment on exported method
    - comment on exported function
    - comment on exported type
    - comment on exported const
    
    # gosec: Allow certain security issues in development
    - G104  # Unhandled errors
    - G304  # File path from variable (needed for file operations)
    - G306  # Poor file permissions (tests may need specific permissions)

severity:
  # Default value is empty string.
  # Set the default severity for issues.
  default-severity: error

  # The default value is false.
  # If set to true, `severity-rules` regular expressions become case-sensitive.
  case-sensitive: false

  # When a list of severity rules are provided, severity information
  # will be added to lint issues.
  rules:
    - linters:
        - dupl
      severity: info
    - linters:
        - gocritic
      severity: warning
    - linters:
        - gosec
      severity: error