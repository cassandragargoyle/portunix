name: Test Suite

on:
  push:
    branches: [ main, master, develop, feature/* ]
  pull_request:
    branches: [ main, master, develop ]

env:
  GO_VERSION: '1.21'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod download
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Build project first (needed for go:embed)
        run: go build -o portunix ./

      - name: Run linter
        env:
          GO111MODULE: on
        run: |
          # Run golangci-lint with our configured .golangci.yml
          # The config already handles embed issues for CI environment
          golangci-lint run ./... --timeout=5m --verbose

      - name: Run go vet
        run: |
          # go vet needs build context for go:embed
          go vet ./...

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Build project first (needed for go:embed)
        run: go build -o portunix ./
        
      - name: Run unit tests
        run: |
          go test -tags=unit -race -coverprofile=unit-coverage.out -covermode=atomic ./...

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./unit-coverage.out
          flags: unit
          name: unit-tests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      docker:
        image: docker:24-dind
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Wait for Docker daemon
        run: |
          timeout 30 sh -c 'until docker info; do sleep 1; done'

      - name: Pull test images
        run: |
          docker pull alpine:latest
          docker pull ubuntu:22.04
          docker pull nginx:alpine

      - name: Build project first (needed for go:embed)
        run: go build -o portunix ./
        
      - name: Run integration tests
        run: |
          go test -tags=integration -race -coverprofile=integration-coverage.out -covermode=atomic -timeout=10m ./...

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./integration-coverage.out
          flags: integration
          name: integration-tests

  cross-platform:
    name: Cross Platform Tests
    runs-on: ${{ matrix.os }}
    needs: unit-tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21', '1.22']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install dependencies
        run: go mod download

      - name: Build
        run: go build -o portunix ./

      - name: Run unit tests
        run: go test -tags=unit -race ./...

      - name: Test CLI functionality
        shell: bash
        run: |
          ./portunix --help
          ./portunix docker --help
          ./portunix install --help

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install security tools
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          go install github.com/sonatypecommunity/nancy@latest

      - name: Run Gosec Security Scanner
        run: gosec -fmt json -out gosec-report.json ./...

      - name: Run Nancy vulnerability scanner
        run: |
          go list -json -deps ./... | nancy sleuth

      - name: Upload Gosec results
        uses: actions/upload-artifact@v3
        with:
          name: gosec-report
          path: gosec-report.json

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem -count=3 ./... > benchmark-results.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.txt

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Build project first (needed for go:embed)
        run: go build -o portunix ./
        
      - name: Run all tests with coverage
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out > coverage-summary.txt

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage.html
            coverage-summary.txt

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: all
          name: full-coverage

      - name: Coverage Badge
        uses: tj-actions/coverage-badge-go@v2
        with:
          filename: coverage.out

      - name: Verify Changed files
        uses: tj-actions/verify-changed-files@v16
        id: verify-changed-files
        with:
          files: README.md

      - name: Commit changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "chore: Updated coverage badge."

      - name: Push changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ github.token }}
          branch: ${{ github.head_ref }}

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, security, cross-platform]
    if: always()
    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "Lint check failed"
            exit 1
          fi
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "Unit tests failed"
            exit 1
          fi
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "Integration tests failed"
            exit 1
          fi
          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "Security scan failed"
            exit 1
          fi
          if [[ "${{ needs.cross-platform.result }}" != "success" ]]; then
            echo "Cross-platform tests failed"
            exit 1
          fi
          echo "All quality gates passed ✅"

      - name: Post results to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const results = {
              lint: '${{ needs.lint.result }}',
              unit: '${{ needs.unit-tests.result }}',
              integration: '${{ needs.integration-tests.result }}',
              security: '${{ needs.security.result }}',
              crossPlatform: '${{ needs.cross-platform.result }}'
            };
            
            const passed = Object.values(results).every(r => r === 'success');
            const emoji = passed ? '✅' : '❌';
            const status = passed ? 'PASSED' : 'FAILED';
            
            const body = `## Quality Gate ${emoji} ${status}
            
            | Check | Status |
            |-------|--------|
            | Lint | ${results.lint === 'success' ? '✅' : '❌'} |
            | Unit Tests | ${results.unit === 'success' ? '✅' : '❌'} |
            | Integration Tests | ${results.integration === 'success' ? '✅' : '❌'} |
            | Security Scan | ${results.security === 'success' ? '✅' : '❌'} |
            | Cross Platform | ${results.crossPlatform === 'success' ? '✅' : '❌'} |
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });